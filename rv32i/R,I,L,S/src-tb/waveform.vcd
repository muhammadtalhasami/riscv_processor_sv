$version Generated by VerilatedVcd $end
$date Sun May 19 22:35:44 2024
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 d clk $end
  $var wire 32 f instruction [31:0] $end
  $var wire  1 e rst $end
  $scope module core $end
   $var wire  1 V DM_Load $end
   $var wire 32 Q DM_alu_res_out [31:0] $end
   $var wire 32 G DM_load_data_in [31:0] $end
   $var wire 32 R DM_store_data_out [31:0] $end
   $var wire 32 k INSTRUCTION [31:0] $end
   $var wire  1 d clk $end
   $var wire  4 W data_mem_mask [3:0] $end
   $var wire  1 T data_mem_request $end
   $var wire  1 $ data_mem_valid $end
   $var wire  1 U data_mem_we_re $end
   $var wire 32 f instruction [31:0] $end
   $var wire  4 m instruction_mem_mask [3:0] $end
   $var wire  1 S instruction_mem_request $end
   $var wire  1 l instruction_mem_we_re $end
   $var wire 32 F instruction_o [31:0] $end
   $var wire 32 P pc_address [31:0] $end
   $var wire  1 e rst $end
   $var wire  1 # valid $end
   $scope module u_Core10 $end
    $var wire 32 k ADDRESS [31:0] $end
    $var wire 32 o ALU_CONTROL [31:0] $end
    $var wire 32 k DATA_WIDTH [31:0] $end
    $var wire  1 V DM_Load $end
    $var wire 32 Q DM_alu_res_out [31:0] $end
    $var wire 32 G DM_load_data_in [31:0] $end
    $var wire 32 R DM_store_data_out [31:0] $end
    $var wire  1 $ DM_valid $end
    $var wire 32 k INSTRUCTION [31:0] $end
    $var wire  1 V Load $end
    $var wire  1 U Store $end
    $var wire 32 P address_out [31:0] $end
    $var wire  4 \ alu_control [3:0] $end
    $var wire 32 Q alu_res_out [31:0] $end
    $var wire  1 d clk $end
    $var wire  4 W data_mem_mask [3:0] $end
    $var wire  1 T data_mem_request $end
    $var wire  1 U data_mem_we_re $end
    $var wire 32 F instruction [31:0] $end
    $var wire  4 m instruction_mem_mask [3:0] $end
    $var wire  1 S instruction_mem_request $end
    $var wire  1 # instruction_mem_valid $end
    $var wire  1 l instruction_mem_we_re $end
    $var wire 32 F instruction_out [31:0] $end
    $var wire  1 U mem_en $end
    $var wire  2 ] mem_to_reg [1:0] $end
    $var wire 32 g opa_mux_out [31:0] $end
    $var wire 32 Y opb_mux_out [31:0] $end
    $var wire 32 % pre_pc [31:0] $end
    $var wire 32 Z rd_wb_data [31:0] $end
    $var wire  1 e rst $end
    $var wire 32 [ wrap_load_out [31:0] $end
    $scope module u_Decode_stage0 $end
     $var wire 32 o ALU_CONTROL [31:0] $end
     $var wire 32 k DATA_WIDTH [31:0] $end
     $var wire  1 $ DM_valid $end
     $var wire 32 k INSTRUCTION [31:0] $end
     $var wire  1 V Load $end
     $var wire  1 U Store $end
     $var wire  4 \ alu_control [3:0] $end
     $var wire  1 d clk $end
     $var wire 32 H i_imme [31:0] $end
     $var wire 32 j imm_mux_out [31:0] $end
     $var wire  3 _ imm_sel [2:0] $end
     $var wire 32 F instruction [31:0] $end
     $var wire  1 U mem_en $end
     $var wire  2 ] mem_to_reg [1:0] $end
     $var wire 32 g op_a [31:0] $end
     $var wire 32 i op_b [31:0] $end
     $var wire 32 g opa_mux_out [31:0] $end
     $var wire 32 Y opb_mux_out [31:0] $end
     $var wire  1 ^ operand_b $end
     $var wire  1 h reg_write $end
     $var wire  1 e rst $end
     $var wire 32 Z rwd_data_out [31:0] $end
     $var wire 32 I s_imme [31:0] $end
     $scope module u_cu0 $end
      $var wire 32 o ALU_CONTROL [31:0] $end
      $var wire  1 $ DM_valid $end
      $var wire 32 q FUNCTION3 [31:0] $end
      $var wire  1 V Load $end
      $var wire 32 r OPCODE [31:0] $end
      $var wire  1 U Store $end
      $var wire  4 \ alu_control [3:0] $end
      $var wire  3 K fun3 [2:0] $end
      $var wire  1 J fun7 $end
      $var wire  1 a i_type $end
      $var wire  3 _ imm_sel [2:0] $end
      $var wire  1 V load $end
      $var wire  1 U mem_en $end
      $var wire  2 ] mem_to_reg [1:0] $end
      $var wire  7 L opcode_i [6:0] $end
      $var wire  1 ^ operand_b_o $end
      $var wire  1 ` r_type $end
      $var wire  1 h reg_write_o $end
      $var wire  1 U store $end
     $upscope $end
     $scope module u_immediate_gene0 $end
      $var wire 32 k INSTRUCTION [31:0] $end
      $var wire 32 H i_imme [31:0] $end
      $var wire 32 F instruction [31:0] $end
      $var wire 32 I s_imme [31:0] $end
     $upscope $end
     $scope module u_registerfile0 $end
      $var wire 32 s AddrRegWidth [31:0] $end
      $var wire 32 k Data_Width [31:0] $end
      $var wire  1 d clk $end
      $var wire 32 Z data [31:0] $end
      $var wire  1 h en $end
      $var wire 32 E i [31:0] $end
      $var wire 32 g op_a [31:0] $end
      $var wire 32 i op_b [31:0] $end
      $var wire  5 O rd [4:0] $end
      $var wire 32 & register(1) [31:0] $end
      $var wire 32 / register(10) [31:0] $end
      $var wire 32 0 register(11) [31:0] $end
      $var wire 32 1 register(12) [31:0] $end
      $var wire 32 2 register(13) [31:0] $end
      $var wire 32 3 register(14) [31:0] $end
      $var wire 32 4 register(15) [31:0] $end
      $var wire 32 5 register(16) [31:0] $end
      $var wire 32 6 register(17) [31:0] $end
      $var wire 32 7 register(18) [31:0] $end
      $var wire 32 8 register(19) [31:0] $end
      $var wire 32 ' register(2) [31:0] $end
      $var wire 32 9 register(20) [31:0] $end
      $var wire 32 : register(21) [31:0] $end
      $var wire 32 ; register(22) [31:0] $end
      $var wire 32 < register(23) [31:0] $end
      $var wire 32 = register(24) [31:0] $end
      $var wire 32 > register(25) [31:0] $end
      $var wire 32 ? register(26) [31:0] $end
      $var wire 32 @ register(27) [31:0] $end
      $var wire 32 A register(28) [31:0] $end
      $var wire 32 B register(29) [31:0] $end
      $var wire 32 ( register(3) [31:0] $end
      $var wire 32 C register(30) [31:0] $end
      $var wire 32 D register(31) [31:0] $end
      $var wire 32 ) register(4) [31:0] $end
      $var wire 32 * register(5) [31:0] $end
      $var wire 32 + register(6) [31:0] $end
      $var wire 32 , register(7) [31:0] $end
      $var wire 32 - register(8) [31:0] $end
      $var wire 32 . register(9) [31:0] $end
      $var wire  5 M rs1 [4:0] $end
      $var wire  5 N rs2 [4:0] $end
      $var wire  1 e rst $end
     $upscope $end
    $upscope $end
    $scope module u_Execute_stage0 $end
     $var wire 32 o ALU_CONTROL [31:0] $end
     $var wire 32 k DATA_WIDTH [31:0] $end
     $var wire 32 g a_i [31:0] $end
     $var wire  4 \ alu_control [3:0] $end
     $var wire 32 Q alu_res_out [31:0] $end
     $var wire 32 Y b_i [31:0] $end
     $scope module u_alu0 $end
      $var wire 32 k DATA_WIDTH [31:0] $end
      $var wire 32 g a_i [31:0] $end
      $var wire 32 Y b_i [31:0] $end
      $var wire  4 \ op_i [3:0] $end
      $var wire 32 Q res_o [31:0] $end
     $upscope $end
    $upscope $end
    $scope module u_Fetch_stage0 $end
     $var wire 32 k ADDRESS [31:0] $end
     $var wire  1 $ DM_valid $end
     $var wire 32 k INSTRUCTION [31:0] $end
     $var wire 32 p address_in [31:0] $end
     $var wire  1 d clk $end
     $var wire 32 F instruction [31:0] $end
     $var wire 32 F instruction_fetch [31:0] $end
     $var wire  1 V load $end
     $var wire  4 m mask [3:0] $end
     $var wire 32 P pc_addr_out [31:0] $end
     $var wire 32 % pre_pc [31:0] $end
     $var wire  1 S request $end
     $var wire  1 e rst $end
     $var wire  1 l we_re $end
     $scope module u_pc0 $end
      $var wire 32 k ADDRESS [31:0] $end
      $var wire  1 $ DM_valid $end
      $var wire 32 p address_in [31:0] $end
      $var wire 32 P address_out [31:0] $end
      $var wire  1 d clk $end
      $var wire  1 V load $end
      $var wire 32 % pre_pc [31:0] $end
      $var wire  1 e rst $end
     $upscope $end
    $upscope $end
    $scope module u_Writeback_stage0 $end
     $var wire 32 k DataWidth [31:0] $end
     $var wire 32 Q alu_out [31:0] $end
     $var wire 32 [ data_mem_out [31:0] $end
     $var wire  2 ] mem_to_reg [1:0] $end
     $var wire 32 Z rd_mux_out [31:0] $end
    $upscope $end
    $scope module u_memorystage0 $end
     $var wire 32 k DataWidth [31:0] $end
     $var wire 32 Q alu_out_address [31:0] $end
     $var wire  1 $ data_valid $end
     $var wire 32 F instruction [31:0] $end
     $var wire  1 V load $end
     $var wire  4 W mask [3:0] $end
     $var wire  1 U mem_en $end
     $var wire 32 Y operand_b [31:0] $end
     $var wire  1 T request $end
     $var wire  1 U store $end
     $var wire 32 R store_data_out [31:0] $end
     $var wire  1 # valid $end
     $var wire  1 U we_re $end
     $var wire 32 G wrap_load_in [31:0] $end
     $var wire 32 [ wrap_load_out [31:0] $end
     $scope module u_wrapper_memory0 $end
      $var wire 32 k DataWidth [31:0] $end
      $var wire  1 V Load $end
      $var wire  2 b byteadd [1:0] $end
      $var wire 32 Y data_i [31:0] $end
      $var wire 32 R data_o [31:0] $end
      $var wire  1 $ data_valid $end
      $var wire  3 K fun3 [2:0] $end
      $var wire  4 W masking [3:0] $end
      $var wire  1 U mem_en $end
      $var wire 32 G wrap_load_in [31:0] $end
      $var wire 32 [ wrap_load_out [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module u_data_memory0 $end
    $var wire 32 p INIT_MEM [31:0] $end
    $var wire  8 c address [7:0] $end
    $var wire  1 d clk $end
    $var wire 32 R data_in [31:0] $end
    $var wire 32 G data_out [31:0] $end
    $var wire  1 V load $end
    $var wire  4 W mask [3:0] $end
    $var wire  1 T request $end
    $var wire  1 e rst $end
    $var wire  1 $ valid $end
    $var wire  1 U we_re $end
    $scope module u_memory $end
     $var wire 32 p INIT_MEM [31:0] $end
     $var wire  8 c address [7:0] $end
     $var wire  1 d clk $end
     $var wire 32 R data_in [31:0] $end
     $var wire 32 G data_out [31:0] $end
     $var wire  4 W mask [3:0] $end
     $var wire  1 T request $end
     $var wire  1 U we_re $end
    $upscope $end
   $upscope $end
   $scope module u_instruc_mem_top0 $end
    $var wire 32 n INIT_MEM [31:0] $end
    $var wire  8 X address [7:0] $end
    $var wire  1 d clk $end
    $var wire 32 f data_in [31:0] $end
    $var wire 32 F data_out [31:0] $end
    $var wire  4 m mask [3:0] $end
    $var wire  1 S request $end
    $var wire  1 e rst $end
    $var wire  1 # valid $end
    $var wire  1 l we_re $end
    $scope module u_memory $end
     $var wire 32 n INIT_MEM [31:0] $end
     $var wire  8 X address [7:0] $end
     $var wire  1 d clk $end
     $var wire 32 f data_in [31:0] $end
     $var wire 32 F data_out [31:0] $end
     $var wire  4 m mask [3:0] $end
     $var wire  1 S request $end
     $var wire  1 l we_re $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
0J
b000 K
b0000000 L
b00000 M
b00000 N
b00000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
1S
0T
0U
0V
b0000 W
b00000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b0000 \
b00 ]
0^
b000 _
0`
0a
b00 b
b00000000 c
0d
1e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
0h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000100000 k
0l
b1111 m
b00000000000000000000000000000001 n
b00000000000000000000000000000100 o
b00000000000000000000000000000000 p
b00000000000000000000000000000011 q
b00000000000000000000000000000111 r
b00000000000000000000000000000101 s
#1
1#
b00000000101000000000000100010011 F
b00000000000000000000000000001010 H
b00000000000000000000000000000010 I
b0010011 L
b01010 N
b00010 O
b00000000000000000000000000000100 P
b00000000000000000000000000001010 Q
b00000001 X
b00000000000000000000000000001010 Y
b00000000000000000000000000001010 Z
1^
1a
b10 b
b00000010 c
1d
1h
b00000000000000000000000000001010 j
#2
0#
b00000000000000000000000000000100 %
b00000000000000000000000000100000 E
b00000000000000000000000000000000 P
b00000000 X
0d
0e
#3
b00000000000000000000000000000000 %
1d
#4
0d
1e
#5
1#
b00000000000000000000000000001010 '
b00000000000000000000000000000100 P
b00000001 X
1d
#6
0d
#7
b00000000000000000000000000000100 %
b00000000001000010000000100110011 F
b00000000000000000000000000000010 H
b0110011 L
b00010 M
b00010 N
b00000000000000000000000000001000 P
b00000000000000000000000000010100 Q
b00000010 X
b00000000000000000000000000010100 Z
0^
1`
0a
b00 b
b00000101 c
1d
b00000000000000000000000000001010 g
b00000000000000000000000000001010 i
b00000000000000000000000000000010 j
#8
0d
#9
b00000000000000000000000000001000 %
b00000000000000000000000000010100 '
b00000000011000010010100000100011 F
b00000000000000000000000000000110 H
b00000000000000000000000000010000 I
b010 K
b0100011 L
b00110 N
b10000 O
b00000000000000000000000000001100 P
b00000000000000000000000000100100 Q
b00000000000000000000000000010000 R
1T
1U
b1111 W
b00000011 X
b00000000000000000000000000010000 Y
b00000000000000000000000000100100 Z
1^
b001 _
0`
b00001001 c
1d
b00000000000000000000000000010100 g
0h
b00000000000000000000000000000000 i
b00000000000000000000000000010000 j
#10
0d
#11
b00000000000000000000000000001100 %
b00000001000000010010001110000011 F
b00000000000000000000000000010000 H
b00000000000000000000000000000111 I
b0000011 L
b10000 N
b00111 O
b00000000000000000000000000010000 P
0S
0U
1V
b00000100 X
b00000000000000000000000000000000 Z
b01 ]
b000 _
1d
1h
#12
0d
#13
0#
1$
b00000000000000000000000000010000 G
b00000000000000000000000000010100 Q
1S
0T
0V
b00000000000000000000000000000000 Y
b00000000000000000000000000010000 Z
b00000000000000000000000000010000 [
0^
b00000101 c
1d
#14
0d
#15
1#
0$
b00000000000000000000000000010000 %
b00000000000000000000000000010000 ,
b00000000000000000000000000000000 F
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b000 K
b0000000 L
b00000 M
b00000 N
b00000 O
b00000000000000000000000000010100 P
b00000000000000000000000000000000 Q
b00000101 X
b00000000 c
1d
b00000000000000000000000000000000 g
0h
b00000000000000000000000000000000 j
#16
0d
#17
b00000000000000000000000000010100 %
b00000000000000000000000000011000 P
b00000110 X
1d
#18
0d
#19
b00000000000000000000000000011000 %
b00000000000000000000000000011100 P
b00000111 X
1d
#20
0d
#21
b00000000000000000000000000011100 %
b00000000000000000000000000100000 P
b00001000 X
1d
#22
0d
#23
b00000000000000000000000000100000 %
b00000000000000000000000000100100 P
b00001001 X
1d
#24
0d
#25
b00000000000000000000000000100100 %
b00000000000000000000000000101000 P
b00001010 X
1d
#26
0d
#27
b00000000000000000000000000101000 %
b00000000000000000000000000101100 P
b00001011 X
1d
#28
0d
#29
b00000000000000000000000000101100 %
b00000000000000000000000000110000 P
b00001100 X
1d
